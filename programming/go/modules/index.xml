<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modules on DocDock Documentation</title>
    <link>/programming/go/modules/</link>
    <description>Recent content in Modules on DocDock Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Oct 2019 14:06:37 -0400</lastBuildDate>
    
	<atom:link href="/programming/go/modules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Usage</title>
      <link>/programming/go/modules/basic-usage/</link>
      <pubDate>Mon, 21 Oct 2019 14:06:37 -0400</pubDate>
      
      <guid>/programming/go/modules/basic-usage/</guid>
      <description>go mod init go mod tidy </description>
    </item>
    
    <item>
      <title>Specifying a specific version</title>
      <link>/programming/go/modules/specify-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/programming/go/modules/specify-version/</guid>
      <description>When using modules, it is possible to use specific package versions when compiling. I&amp;rsquo;ve found that the easiest way to do this is through go mod using tidy, vendor, and go get.
# make sure you&amp;#39;re outside of your GOPATH and you have modules initialized go mod init github.com/thefury/sooperpackage # get the specific version needed: hash, tag, branch can all be used go get github.com/thefury/required_package@978da6523 go mod vendor # I like to do this in any case # you should see that the correct version is now used cat go.</description>
    </item>
    
  </channel>
</rss>