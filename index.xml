<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DocDock Documentation</title>
    <link>/</link>
    <description>Recent content on DocDock Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Nov 2019 13:36:55 -0500</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting Up kubectl for AKS</title>
      <link>/azure/setting-up-kubectl-for-aks/</link>
      <pubDate>Thu, 28 Nov 2019 13:36:55 -0500</pubDate>
      
      <guid>/azure/setting-up-kubectl-for-aks/</guid>
      <description>If you haven&amp;rsquo;t already installed kubectl, you can do so with the following:
# if you haven&amp;#39;t already sinatlled `kubectl` for your system... az aks install-cli # Connect to your cluster az aks get-credentials--resource-group myGroup --name myAKSCluster </description>
    </item>
    
    <item>
      <title>Logging Into Azure ACR</title>
      <link>/azure/logging-into-azure-container-registry/</link>
      <pubDate>Thu, 28 Nov 2019 13:36:16 -0500</pubDate>
      
      <guid>/azure/logging-into-azure-container-registry/</guid>
      <description># first login with `az login` az acr login --name my-container-registry </description>
    </item>
    
    <item>
      <title>Connecting To the Azure CLI</title>
      <link>/azure/connecting-az-cli/</link>
      <pubDate>Thu, 28 Nov 2019 13:35:52 -0500</pubDate>
      
      <guid>/azure/connecting-az-cli/</guid>
      <description>It&amp;rsquo;s as simple as:
az login # opens a browser window for authentication </description>
    </item>
    
    <item>
      <title>Delivering Packages With Helm</title>
      <link>/kubernetes/delivering-packages-with-helm/</link>
      <pubDate>Thu, 28 Nov 2019 13:34:44 -0500</pubDate>
      
      <guid>/kubernetes/delivering-packages-with-helm/</guid>
      <description>helm works by creating a different number of k8s files and applying them. Rolling back etc.</description>
    </item>
    
    <item>
      <title>Live Edit Any Website</title>
      <link>/programming/web/live-edit-any-website/</link>
      <pubDate>Thu, 14 Nov 2019 10:29:20 -0500</pubDate>
      
      <guid>/programming/web/live-edit-any-website/</guid>
      <description>Highlight the following text and drag to your bookmark bar:
javascript:document.body.contentEditable = ‘true’; document.designMode=’on’; void 0  Fun, and possibly useful when showing edits to a client site.
Scooped from: here</description>
    </item>
    
    <item>
      <title>Check if Value Implements Interface</title>
      <link>/programming/go/check-if-value-implements-interface/</link>
      <pubDate>Mon, 04 Nov 2019 12:27:08 -0500</pubDate>
      
      <guid>/programming/go/check-if-value-implements-interface/</guid>
      <description>import ( &amp;#34;io&amp;#34; &amp;#34;strings&amp;#34; ) func main() { val := strings.NewReader(&amp;#34;haloo!&amp;#34;) _, ok := val.(io.Reader) fmt.Printf(&amp;#34;val implements io.Reader: %v&amp;#34;, ok) } </description>
    </item>
    
    <item>
      <title>Sftp Only Account</title>
      <link>/operations/ssh/sftp-only-account/</link>
      <pubDate>Fri, 01 Nov 2019 11:56:36 -0400</pubDate>
      
      <guid>/operations/ssh/sftp-only-account/</guid>
      <description>a link</description>
    </item>
    
    <item>
      <title>Stubbing Mocking Fakes</title>
      <link>/programming/go/testing/stubbing-mocking-fakes/</link>
      <pubDate>Mon, 28 Oct 2019 17:51:32 -0400</pubDate>
      
      <guid>/programming/go/testing/stubbing-mocking-fakes/</guid>
      <description>  stubbing and such  Example of Creating a Simple Mock  example  </description>
    </item>
    
    <item>
      <title>Convert io.Reader to String</title>
      <link>/programming/go/convert-reader-to-string/</link>
      <pubDate>Fri, 25 Oct 2019 17:09:43 -0400</pubDate>
      
      <guid>/programming/go/convert-reader-to-string/</guid>
      <description>Converting from an io.Reader to a string
func ToString(r io.Reader) string { var buf.BytesBuffer buf.ReadFrom(r) return buf.String() } </description>
    </item>
    
    <item>
      <title>Automatic Test Generation</title>
      <link>/programming/go/testing/automatic-test-generation/</link>
      <pubDate>Fri, 25 Oct 2019 11:47:13 -0400</pubDate>
      
      <guid>/programming/go/testing/automatic-test-generation/</guid>
      <description># geterate test skeleton for all Decrypt methods in `crypt` gotests -only &amp;#34;Decrypt*&amp;#34; crypt/ </description>
    </item>
    
    <item>
      <title>Table Driven Tests</title>
      <link>/programming/go/testing/table-driven-tests/</link>
      <pubDate>Fri, 25 Oct 2019 11:46:52 -0400</pubDate>
      
      <guid>/programming/go/testing/table-driven-tests/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Test Directories</title>
      <link>/programming/go/testing/test-directories/</link>
      <pubDate>Fri, 25 Oct 2019 11:46:38 -0400</pubDate>
      
      <guid>/programming/go/testing/test-directories/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Basic Usage</title>
      <link>/programming/go/modules/basic-usage/</link>
      <pubDate>Mon, 21 Oct 2019 14:06:37 -0400</pubDate>
      
      <guid>/programming/go/modules/basic-usage/</guid>
      <description>go mod init go mod tidy </description>
    </item>
    
    <item>
      <title>Specifying a specific version</title>
      <link>/programming/go/modules/specify-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/programming/go/modules/specify-version/</guid>
      <description>When using modules, it is possible to use specific package versions when compiling. I&amp;rsquo;ve found that the easiest way to do this is through go mod using tidy, vendor, and go get.
# make sure you&amp;#39;re outside of your GOPATH and you have modules initialized go mod init github.com/thefury/sooperpackage # get the specific version needed: hash, tag, branch can all be used go get github.com/thefury/required_package@978da6523 go mod vendor # I like to do this in any case # you should see that the correct version is now used cat go.</description>
    </item>
    
  </channel>
</rss>