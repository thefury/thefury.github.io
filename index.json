[
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "This is a main content\n"
},
{
	"uri": "/programming/go/modules/basic-usage/",
	"title": "Basic Usage",
	"tags": [],
	"description": "",
	"content": "go mod init go mod tidy "
},
{
	"uri": "/programming/go/modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": "Everything about Go modules\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/programming/go/",
	"title": "Go",
	"tags": [],
	"description": "",
	"content": "All the stuffs related to Go\n"
},
{
	"uri": "/programming/",
	"title": "Programming",
	"tags": [],
	"description": "",
	"content": "Programming directory\n"
},
{
	"uri": "/programming/go/modules/specify-version/",
	"title": "Specifying a specific version",
	"tags": [],
	"description": "",
	"content": "When using modules, it is possible to use specific package versions when compiling. I\u0026rsquo;ve found that the easiest way to do this is through go mod using tidy, vendor, and go get.\n# make sure you\u0026#39;re outside of your GOPATH and you have modules initialized go mod init github.com/thefury/sooperpackage # get the specific version needed: hash, tag, branch can all be used go get github.com/thefury/required_package@978da6523 go mod vendor # I like to do this in any case # you should see that the correct version is now used cat go.mod "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]